generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  previewFeatures = ["multiSchema"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
    schemas  = ["public", "auth"]

}

model User {
  id        String   @id @default(uuid()) // Changed to UUID
  email     String   @unique
  userType  UserType @default(LISTENER) // Enum to differentiate user types
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listenerProfile ListenerProfile?
  artistProfile   ArtistProfile?
  playlists       Playlist[]
}


model ListenerProfile {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id") // Changed to String
  username   String   @unique
  fullName   String?  @map("full_name")
  aboutMe    String?  @map("about_me")
  profilePic String?  @map("profile_pic")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  friends    Friend[] @relation("Friends")
  friendOf   Friend[] @relation("FriendOf")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("listener_profiles")
}

model ArtistProfile {
  id             String        @id @default(uuid())
  userId         String        @unique @map("user_id") // Changed to String
  stageName      String        @unique @map("stage_name")
  bio            String?
  coverImage     String?       @map("cover_image")
  profilePic     String?       @map("profile_pic")
  genreTags      String[]      @map("genre_tags")
  instrumentTags String[]      @map("instrument_tags")
  socialLinks    Json?         @map("social_links")
  isVerified     Boolean       @default(false) @map("is_verified")
  verificationDetails Json?     @map("verification_details")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  songs          Song[]
  artistTags     TagAssignment[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("artist_profiles")
}

model Song {
  id        String   @id @default(uuid())
  title     String
  artist    String
  duration  String
  cover     String
  filePath  String   @map("file_path")
  genre     String
  createdAt DateTime @default(now())
  playlists Playlist[] @relation("PlaylistSongs")
  artistRef ArtistProfile? @relation(fields: [artistId], references: [id])
  artistId  String?   @map("artist_id")
  liked     Boolean   @default(false)
  likes     Int?      @default(0)
  plays     Int?      @default(0)
  @@map("songs")
}

model Playlist {
  id        Int      @id @default(autoincrement())
  name      String
  userId    String   @map("user_id") // Changed to String
  user      User     @relation(fields: [userId], references: [id])
  songs     Song[]   @relation("PlaylistSongs")
  createdAt DateTime @default(now())
  @@map("playlists")
}

model Friend {
  id        String   @id @default(uuid())
  listenerProfileId String @map("listener_profile_id")
  friendProfileId String @map("friend_profile_id")
  createdAt DateTime @default(now()) @map("created_at")
  listenerProfile ListenerProfile @relation("Friends", fields: [listenerProfileId], references: [id])
  friendProfile   ListenerProfile @relation("FriendOf", fields: [friendProfileId], references: [id])
  @@unique([listenerProfileId, friendProfileId])
  @@map("friends")
}

model ArtistTag {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now()) @map("created_at")
  assignments TagAssignment[]
  @@map("artist_tags")
}

model TagAssignment {
  id            String        @id @default(uuid())
  artistProfileId String      @map("artist_profile_id")
  tagId         String      @map("tag_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  artistProfile   ArtistProfile @relation(fields: [artistProfileId], references: [id])
  tag           ArtistTag     @relation(fields: [tagId], references: [id])
  @@unique([artistProfileId, tagId])
  @@map("tag_assignments")
}

enum UserType {
  LISTENER
  ARTIST
}